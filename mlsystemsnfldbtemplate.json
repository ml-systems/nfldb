{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "dbserver_name": {
            "defaultValue": "nfldbrs",
            "type": "String"
        },
        "FunctionApp_name": {
            "defaultValue": "NFLGamers",
            "type": "String"
        },
        "storageAccount_name": {
            "defaultValue": "nflgenstoragers",
            "type": "String"
        },
        "dbpassword": {
            "defaultValue": "P@sswor4!",
            "type": "String"
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
        "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
},
    "resources": [
		{
			"name": "[concat(parameters('FunctionApp_name'),'/PShredder')]",
			"type": "Microsoft.Web/sites/functions",
			"apiVersion": "2015-08-01",
			"properties": {
				"config": {
					  "bindings": [
						{
						  "name": "req",
						  "webHookType": "genericJson",
						  "direction": "in",
						  "type": "httpTrigger"
						},
						{
						  "name": "res",
						  "direction": "out",
						  "type": "http"
						}
					  ],
					"disabled": false
				},
				"files": {
					"run.py": "import json\nimport types\nimport io\nimport csv\nimport copy\nimport os\n\nfrom io import BytesIO\nimport sys, os.path\n\ndef iterprint(dat,objkey,objval,whitelisted={},blacklisted={},valuefied={},keyified={},level=1,rider=[]):\n    global daty\n    daty=dat\n    if whitelisted.get(str(objkey),"")==level or level not in whitelisted.values():\n        if blacklisted.get(str(objkey),"")!=level:\n            if isinstance(objval,dict):\n                if not rider:\n                    rider.append(objkey)\n                else:\n                    \n                    if valuefied.get(str(objkey),"")==level:\n                        if rider[len(rider)-1][-1]=='-':\n                            rider[len(rider)-1]+=(str(objkey)+'-')\n                        else:\n                            rider.append(str(objkey)+'-')\n                    else:\n                        if rider[len(rider)-1][-1]=='-':\n                            rider[len(rider)-1]+=str(objkey)\n                        else:\n                            rider.append(objkey)\n                level+=1\n                for dictkey, dictval in objval.items():\n                    rider2 = copy.deepcopy(rider)  \n                    iterprint(daty,dictkey,dictval,whitelisted,blacklisted,valuefied,keyified,level,rider2)\n            elif isinstance(objval,list):\n                if not rider:\n                    rider.append(objkey)\n                else:\n                    if valuefied.get(str(objkey),"")==level:\n                        if rider[len(rider)-1][-1]=='-':\n                            rider[len(rider)-1]+=(str(objkey)+'-')\n                        else:\n                            rider.append(str(objkey)+'-')\n                    else:\n                        if rider[len(rider)-1][-1]=='-':\n                            rider[len(rider)-1]+=str(objkey)\n                        else:\n                            rider.append(objkey)\n\n                level+=1\n                for itm in objval:\n                    if isinstance(itm,dict):\n                        keyifiedval=False\n                        for itmkey, itmval in itm.items():\n                            if keyified.get(str(itmkey),"")==level:\n                                keyifiedval=itmval\n                                keyifiedkey=itmkey\n                        if keyifiedval!=False:\n                            rider2=copy.deepcopy(rider)\n                            rider2.append(str(keyifiedkey))\n                            rider2.append(str(keyifiedval))\n                            for dictkey, dictval in itm.items():\n                                rider3 = copy.deepcopy(rider2)\n                                if dictkey!=keyifiedkey:\n                                    iterprint(daty,dictkey,dictval,whitelisted,blacklisted,valuefied,keyified,level,rider3)                            \n                        else:\n                            for dictkey, dictval in itm.items():\n                                rider2 = copy.deepcopy(rider)\n                                iterprint(daty,dictkey,dictval,whitelisted,blacklisted,valuefied,keyified,level,rider2)\n                    elif isinstance(itm,list):\n                        lkey=''\n                        for lval in itm:\n                            rider2 = copy.deepcopy(rider) \n                            iterprint(daty,lkey,lval,whitelisted,blacklisted,valuefied,keyified,level,rider2)\n                    else:\n                        if rider[len(rider)-1][-1]=='-':\n                            rider[len(rider)-1]+=(str(objkey))\n                            rider.append(objval)\n                            daty.append(rider)\n                            rider=[]\n                        else:\n                            rider.append(objkey)\n                            rider.append(objval)\n                            daty.append(rider)\n                            rider=[]\n            else:\n                if not rider:\n                    rider.append(objkey)\n                    rider.append(objval)\n                    daty.append(rider)\n                    rider=[]\n                else:\n                    if rider[len(rider)-1][-1]=='-':\n                        rider[len(rider)-1]+=(str(objkey))\n                        rider.append(objval)\n                        daty.append(rider)\n                        rider=[]\n                    else: \n                        rider.append(objkey)\n                        rider.append(objval)\n                        daty.append(rider)\n                        rider=[]\n        \n\ndef column(matrix, i):\n    return [row[i] for row in matrix]\n\ndef pivt(originallist,pivotedcolumn):\n    pivotedcolumnset=set()\n    originalpivotedcolumnlist=column(originallist,pivotedcolumn-1)\n    pivotedcolumnsetlist = [x for x in originalpivotedcolumnlist if x not in pivotedcolumnset and (pivotedcolumnset.add(x) or True)]\n    pivotedcolumnsetdict = {}\n    vals = range(len(originallist[0])-1,len(originallist[0])+len(pivotedcolumnset)-1)\n    for i in vals:\n        pivotedcolumnsetdict[pivotedcolumnsetlist[i-len(originallist[0])-1]] = i\n\n    withoutpivotedmdlist=[]\n    for row in originallist:\n        currentrowlist=[]\n        for index, col in enumerate(row):\n            if (index!=(pivotedcolumn-1) and index!=(len(row)-1)): currentrowlist.append(col)\n        withoutpivotedmdlist.append(currentrowlist)\n\n    uniquewithoutpivotedmdlist = [list(x) for x in set(tuple(x) for x in withoutpivotedmdlist)]\n\n\n    for row in uniquewithoutpivotedmdlist:\n        for key,val in pivotedcolumnsetdict.items():\n            row.append('')\n\n    \n    j=0        \n            \n    for pivotedcolumnsetdictkey, pivotedcolumnsetdictval in pivotedcolumnsetdict.items():\n        for uniquewithoutpivotedmdlistrow in uniquewithoutpivotedmdlist:\n            preuniquewpivoted=uniquewithoutpivotedmdlistrow[:(pivotedcolumn-1)]+[pivotedcolumnsetdictkey]+uniquewithoutpivotedmdlistrow[pivotedcolumn:-1]\n            uniquewpivoted=preuniquewpivoted[:len(originallist[0])-1]\n            for originallistrow in originallist:\n                if originallistrow[:-1]==uniquewpivoted:\n                    uniquewithoutpivotedmdlistrow[pivotedcolumnsetdictval-1]=originallistrow[-1]\n    return uniquewithoutpivotedmdlist\n\n\ndef csvify(x):\n    output = io.BytesIO()\n    writer = csv.writer(output, quoting=csv.QUOTE_NONNUMERIC,lineterminator='\\n')\n\n    for ro in x:\n        writer.writerow(ro)\n    return output.getvalue()\n\n\npostreqdata = json.loads(open(os.environ['req']).read())\nresponse = open(os.environ['res'], 'w')\n\nexcl= json.loads(os.environ['REQ_QUERY_WHITELISTED'])\nincl= json.loads(os.environ['REQ_QUERY_BLACKLISTED'])\nvaluefied= json.loads(os.environ['REQ_QUERY_VALUEFIED'])\nkeyified= json.loads(os.environ['REQ_QUERY_KEYIFIED'])\npivotcol= json.loads(os.environ['REQ_QUERY_PIVOTCOL'])\n\n\nglobal daty\ndaty=[]\n\nlevel=1\nrider=[]\nfor firstlevelkey, firstlevelval in postreqdata.items():\n    rider2=copy.deepcopy(rider)\n    iterprint(daty,firstlevelkey,firstlevelval,incl,excl,valuefied,keyified,level,rider2)\n\nfor roo in daty:\n    roo[0]=int(roo[0])\n\nif not pivotcol:\n    y=csvify(daty)\nelse:\n    y=csvify(pivt(daty,pivotcol[0]))\n\nresponse.write(y)\nresponse.close()"			}
			},
			"dependsOn":[
			"[resourceId('Microsoft.Web/sites', parameters('FunctionApp_name'))]"
			]
		},
		{
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "GameDayData_PFunction_Schedule2",
            "location": "[resourceGroup().location]",
            "tags": {
            },
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Week",
                                "interval": 1,
                                "schedule": {
                                    "hours": [
                                        12,
                                        13,
                                        14,
                                        15,
                                        16,
                                        17,
                                        18,
                                        19,
                                        20,
                                        21,
                                        22,
                                        23
                                    ],
                                    "minutes": [
                                        0,
                                        30
                                    ],
                                    "weekDays": [
                                        "Monday",
                                        "Thursday",
                                        "Sunday"
                                    ]
                                },
                                "timeZone": "Central Standard Time"
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Build_Drive": {
                            "runAfter": {
                                "Truncated_Landing_tables": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[NFLDB].[BuildDrive]'))}"
                            }
                        },
                        "Build_Game": {
                            "runAfter": {
                                "Truncated_Landing_tables": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[NFLDB].[BuildGame]'))}"
                            }
                        },
                        "Build_Play": {
                            "runAfter": {
                                "Truncated_Landing_tables": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[NFLDB].[BuildPlay]'))}"
                            }
                        },
                        "CDCGame": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[MasterNFL].[CDCgame]'))}"
                            }
                        },
                        "CDC_Drive": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[MasterNFL].[CDCDrive]'))}"
                            }
                        },
                        "CDC_Play": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[MasterNFL].[CDCplay]'))}"
                            }
                        },
                        "CDC_Play_Player": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[MasterNFL].[CDCplayplayer]'))}"
                            }
                        },
                        "Check_For_Updates_needed": {
                            "runAfter": {
                                "Set_Season_Year": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "Season": "@variables('SeasonYear')"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[CheckForIncompleteGames]'))}"
                            }
                        },
                        "Check_For_Work": {
                            "actions": {
                                "Check_Tier_Level_": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "SELECT  d.name,   \n     slo.database_id, slo.edition, slo.service_objective, slo.elastic_pool_name    \nFROM sys.databases d   \nJOIN sys.database_service_objectives slo    \nON d.database_id = slo.database_id; "
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/query/sql"
                                    }
                                },
                                "For_each_2": {
                                    "foreach": "@body('Check_Tier_Level_')?['resultsets']?['Table1']",
                                    "actions": {
                                        "If_not_equal_to_s3_then_update": {
                                            "actions": {},
                                            "runAfter": {},
                                            "expression": {
                                                "or": [
                                                    {
                                                        "equals": [
                                                            "@items('For_each_2')?['service_objective']",
                                                            "S3"
                                                        ]
                                                    },
                                                    {
                                                        "equals": [
                                                            1,
                                                            1
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If",
                                            "description": "For now i added 1=1 to not scale up and to test serverless performance/cost "
                                        }
                                    },
                                    "runAfter": {
                                        "Check_Tier_Level_": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "Check_For_Updates_needed": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Terminate_with_no_error_if_no_work_": {
                                        "runAfter": {},
                                        "type": "Terminate",
                                        "inputs": {
                                            "runStatus": "Succeeded"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Check_For_Updates_needed')?['returncode']",
                                            1
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_each": {
                            "foreach": "@body('List_Of_Missing_Games')?['resultsets']?['Table1']",
                            "actions": {
                                "Bulk_Load_Drive_to_SQL": {
                                    "runAfter": {
                                        "Load_Drive_to_Storage": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "eid": "@{items('For_each')?['GameID']}",
                                            "fileName": "@body('Load_Drive_to_Storage')?['Name']",
                                            "filePath": "gamedayshred/@{items('For_each')?['SeasonYear']}/"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[bulkloaddrive]'))}"
                                    }
                                },
                                "Bulk_Load_Game_to_SQL": {
                                    "runAfter": {
                                        "Load_Game_to_Storage": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "eid": "@{items('For_each')?['GameID']}",
                                            "fileName": "@body('Load_Game_to_Storage')?['Name']",
                                            "filePath": "gamedayshred/@{items('For_each')?['SeasonYear']}/"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[bulkloadgame]'))}"
                                    }
                                },
                                "Create_blob": {
                                    "runAfter": {
                                        "PShred_PlayerPlay": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('PShred_PlayerPlay')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedayshred/@{items('For_each')?['SeasonYear']}",
                                            "name": "@{items('For_each')?['GameID']}_playerplay.csv"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Execute_stored_procedure_2": {
                                    "runAfter": {
                                        "Load_PPlay_to_Storage": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "eid": "@{items('For_each')?['GameID']}",
                                            "fileName": "@body('Load_PPlay_to_Storage')?['Name']",
                                            "filePath": "gamedayshred/@{items('For_each')?['SeasonYear']}/"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[bulkloadplay]'))}"
                                    }
                                },
                                "Execute_stored_procedure_3": {
                                    "runAfter": {
                                        "Create_blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "eid": "@{items('For_each')?['GameID']}",
                                            "fileName": "@body('Create_blob')?['Name']",
                                            "filePath": "gamedayshred/@{items('For_each')?['SeasonYear']}/"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[bulkloadplayplayer]'))}"
                                    }
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "method": "GET",
                                        "uri": "http://www.nfl.com/liveupdate/game-center/@{items('For_each')?['GameID']}/@{items('For_each')?['GameID']}_gtd.json"
                                    }
                                },
                                "Load_Drive_to_Storage": {
                                    "runAfter": {
                                        "PShred_Drive": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('PShred_Drive')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedayshred/@{items('For_each')?['SeasonYear']}",
                                            "name": "@{items('For_each')?['GameID']}_drive.csv"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Load_Game_to_Storage": {
                                    "runAfter": {
                                        "PShred_Game": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('PShred_Game')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedayshred/@{items('For_each')?['SeasonYear']}",
                                            "name": "@{items('For_each')?['GameID']}_game.csv"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Load_PPlay_to_Storage": {
                                    "runAfter": {
                                        "PShred_Play": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('PShred_Play')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedayshred/@{items('For_each')?['SeasonYear']}",
                                            "name": "@{items('For_each')?['GameID']}_play.csv"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Load_Status_to_Storage": {
                                    "runAfter": {
                                        "PShred_Status": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('PShred_Status')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedayshred/@{items('For_each')['SeasonYear']}",
                                            "name": "@{items('For_each')['GameID']}_status.csv",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "PShred_Drive": {
                                    "runAfter": {
                                        "Update_Raw_Json_Blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "function": {
                                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('FunctionApp_name')), '/functions/PShredder')]"
                                        },
                                        "queries": {
                                            "blacklisted": "{\"nextupdate\":1,\"crntdrv\": 3, \"plays\": 4 }",
                                            "whitelisted": "{\"drives\":2}",
                                            "valuefied": "{\"end\": 4, \"start\": 4 }",
											"keyified":"{}",
                                            "pivotcol": "[[4]"
                                        }
                                    }
                                },
                                "PShred_Game": {
                                    "runAfter": {
                                        "Update_Raw_Json_Blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "function": {
                                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('FunctionApp_name')), '/functions/PShredder')]"
                                        },
                                        "queries": {
                                            "blacklisted": "{\"nextupdate\":1}",
                                            "whitelisted": "{\"qtr\":2,\"away\":2,\"home\":2,\"team\":4,\"1\":4,\"2\":4,\"3\":4,\"4\":4,\"5\":4,\"T\":4}",
                                            "valuefied": "{\"away\":2,\"home\":2,\"stats\":3,\"score\":3,\"team\":4}",
											"keyified":"{\"sequence\": 8}",
                                            "pivotcol": "[[2]"
                                        }
                                    }
                                },
                                "PShred_Play": {
                                    "runAfter": {
                                        "Update_Raw_Json_Blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "function": {
                                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('FunctionApp_name')), '/functions/PShredder')]"
                                        },
                                        "queries": {
                                            "blacklisted": "{\"nextupdate\":1,\"crntdrv\": 3, \"players\": 6 }",
                                            "whitelisted": "{\"drives\":2,\"plays\": 4}",
                                            "valuefied": "{}",
											"keyified":"{\"sequence\": 8}",
                                            "pivotcol": "[[8]"
                                        }
                                    }
                                },
                                "PShred_PlayerPlay": {
                                    "runAfter": {
                                        "Update_Raw_Json_Blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "function": {
                                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('FunctionApp_name')), '/functions/PShredder')]"
                                        },
                                        "queries": {
                                            "blacklisted": "{\"nextupdate\":1,\"crntdrv\": 3}",
                                            "whitelisted": "{\"drives\":2,\"plays\": 4,\"players\":6}",
                                            "valuefied": "{}",
											"keyified":"{}",
                                            "pivotcol": "[[8]"
                                        }
                                    }
                                },
                                "PShred_Status": {
                                    "runAfter": {
                                        "Skip_for_now": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "function": {
                                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('FunctionApp_name')), '/functions/PShredder')]"
                                        },
                                        "queries": {
                                            "blacklisted": "{\"nextupdate\":1}",
                                            "whitelisted": "{\"weather\":2,\"media\":2,\"yl\":2,\"qtr\":2,\"note\":2,\"down\":2,\"togo\":2,\"redzone\":2,\"clock\":2,\"posteam\":2,\"stadium\":2}",
                                            "valuefied": "{}",
											"keyified":"{}",
                                            "pivotcol": "{}"
                                        }
                                    }
                                },
                                "Skip_for_now": {
                                    "actions": {},
                                    "runAfter": {
                                        "Update_Raw_Json_Blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    1,
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Update_Raw_Json_Blob": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/gamedaydatajson",
                                            "name": "@{items('For_each')?['GameID']}.json"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "List_Of_Missing_Games": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "List_Of_Missing_Games": {
                            "runAfter": {
                                "Check_For_Work": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "SELECT s.*, g.[current-quarter]\nFROM NFLDB.Schedule AS s\n\t left JOIN MasterNFL.game AS g ON g.eid=s.GameID\nWHERE s.SeasonYear=@{variables('SeasonYear')}\n\tAND ISNULL(g.[current-quarter], '1') not like '%Final%' \n\tAND s.GameDay<=GETDATE()\nORDER BY s.GameID"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/query/sql"
                            }
                        },
                        "Set_Season_Year": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SeasonYear",
                                        "type": "Integer",
                                        "value": 2019
                                    }
                                ]
                            }
                        },
                        "Truncated_Landing_tables": {
                            "runAfter": {
                                "CDCGame": [
                                    "Succeeded"
                                ],
                                "CDC_Drive": [
                                    "Succeeded"
                                ],
                                "CDC_Play": [
                                    "Succeeded"
                                ],
                                "CDC_Play_Player": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[LandNFL].[TruncateTables]'))}"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'azureblob-1')]",
                                "connectionName": "azureblob-1",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "sql_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'sql-1')]",
                                "connectionName": "sql-1",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]"
                            }
                        }
                    }
                }
            },
			"dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob-1')]",
                "[resourceId('Microsoft.Web/connections', 'sql-1')]",
				"[resourceId('Microsoft.Web/sites/functions',parameters('FunctionApp_name'), 'PShredder')]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Logic/workflows/LoadNFLSchedule'.",
            "type": "Microsoft.Logic/workflows",
            "name": "LoadNFLSchedule",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "Solution": "Final"
            },
            "scale": null,
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "$id": "http://example.com/root.json",
                                    "$schema": "http://json-schema.org/draft-07/schema#",
                                    "definitions": {},
                                    "properties": {
                                        "hi": {
                                            "$id": "#/properties/hi",
                                            "default": "",
                                            "examples": [
                                                ""
                                            ],
                                            "pattern": "^(.*)$",
                                            "title": "The Hi Schema",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "hi"
                                    ],
                                    "title": "The Root Schema",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Build_Schedule": {
                            "runAfter": {
                                "CDC_Schedule_": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[NFLDB].[BuildSchedule]'))}"
                            }
                        },
                        "CDC_Schedule_": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[MasterNFL].[CDCSchedule]'))}"
                            }
                        },
                        "Execute_a_SQL_query": {
                            "runAfter": {
                                "Get_rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "TRUNCATE TABLE LandNFL.Schedule"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/query/sql"
                            }
                        },
                        "For_each": {
                            "foreach": "@body('Get_rows')?['value']",
                            "actions": {
                                "Create_blob": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('HTTP')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/nflschedule",
                                            "name": "@{variables('Year')}_@{items('For_each')?['SeasonType']}_@{items('For_each')?['Week']}.xml"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "method": "GET",
                                        "uri": "http://www.nfl.com/ajax/scorestrip?season=@{variables('Year')}&seasonType=@{items('For_each')?['SeasonType']}&week=@{items('For_each')?['Week']}"
                                    }
                                },
                                "Insert_row": {
                                    "runAfter": {
                                        "Create_blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "ScheduleXML": "@{body('HTTP')}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[LandNFL].[Schedule]'))}/items"
                                    }
                                }
                            },
                            "runAfter": {
                                "Execute_a_SQL_query": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_rows": {
                            "runAfter": {
                                "Set_Year": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sql_1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[NFLDB].[ScheduleDefinition]'))}/items"
                            }
                        },
                        "Set_Year": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Year",
                                        "type": "Integer",
                                        "value": 2019
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'azureblob-1')]",
                                "connectionName": "azureblob-1",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "sql_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'sql-1')]",
                                "connectionName": "sql-1",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]"
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob-1')]",
                "[resourceId('Microsoft.Web/connections', 'sql-1')]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Sql/servers/nfldbrs'.",
            "type": "Microsoft.Sql/servers",
            "kind": "v12.0",
            "name": "[parameters('dbserver_name')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "administratorLogin": "dbadmin",
                "administratorLoginPassword":"[parameters('dbpassword')]",
                "version": "12.0"
            },
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Storage/storageAccounts/aiea47qbhs3woazfunctions'.",
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "tags": {},
            "scale": null,
            "properties": {
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Storage/storageAccounts/nflgenstoragers'.",
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "name": "[parameters('storageAccount_name')]",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "tags": {},
            "scale": null,
            "properties": {
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
			"resources": [
				{
				  "type": "blobServices/containers",
				  "apiVersion": "2018-03-01-preview",
				  "name": "['default/gamedaydatajson']",
				  "dependsOn": [
					"[parameters('storageAccount_name')]"
				  ],
				  "properties": {
					"publicAccess": "None"
				  }
				},
				{
				  "type": "blobServices/containers",
				  "apiVersion": "2018-03-01-preview",
				  "name": "['default/gamedayshred']",
				  "dependsOn": [
					"[parameters('storageAccount_name')]"
				  ],
				  "properties": {
					"publicAccess": "Blob"
				  }
				},
				{
				  "type": "blobServices/containers",
				  "apiVersion": "2018-03-01-preview",
				  "name": "['default/nflschedule']",
				  "dependsOn": [
					"[parameters('storageAccount_name')]"
				  ],
				  "properties": {
					"publicAccess": "None"
				  }
				}
			],
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/connections/azureblob-1'.",
            "type": "Microsoft.Web/connections",
            "name": "azureblob-1",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "displayName": "blobconnection",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
				"parameterValues": {
				"accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
				"accountName": "[parameters('storageAccount_name')]"
				}
            },
            "dependsOn": [
			"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
			]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/connections/sql-1'.",
            "type": "Microsoft.Web/connections",
            "name": "sql-1",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "displayName": "sqlconnection",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]"
                },
			"parameterValues": {
				"server": "[concat(parameters('dbserver_name'),'.database.windows.net')]",
				"database": "['nfldb']",
				"username": "['dbadmin']",
				"password": "[parameters('dbpassword')]"
				}
            },
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/serverfarms/NFLGamers'.",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "kind": "functionapp",
            "name": "[parameters('FunctionApp_name')]",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "name": "[parameters('FunctionApp_name')]",
                "workerTierName": null,
                "adminSiteName": null,
                "hostingEnvironmentProfile": null,
                "perSiteScaling": false,
                "reserved": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            },
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/sites/NFLGamers'.",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "name": "[parameters('FunctionApp_name')]",
            "apiVersion": "2016-08-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(parameters('FunctionApp_name'),parameters('FunctionApp_name'),'.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "virtualIP": null,
                        "thumbprint": null,
                        "toUpdate": null,
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(parameters('FunctionApp_name'),parameters('FunctionApp_name'),'.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "virtualIP": null,
                        "thumbprint": null,
                        "toUpdate": null,
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionApp_name'))]",
                "reserved": false,
                "siteConfig": null,
                "scmSiteAlsoStopped": false,
                "hostingEnvironmentProfile": null,
                "clientAffinityEnabled": true,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "cloningInfo": null
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionApp_name'))]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Sql/servers/nfldbrs/databases/nfldbrs'.",
            "type": "Microsoft.Sql/servers/databases",
            "kind": "v12.0,user",
            "name": "[concat(parameters('dbserver_name'), '/nfldb')]",
            "apiVersion": "2014-04-01-preview",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "edition": "Standard",
                "status": "Online",
                "serviceLevelObjective": "S0",
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": "268435456000",
                "sampleName": null,
                "defaultSecondaryLocation": "West US",
                "elasticPoolName": null,
                "containmentState": 2,
                "readScale": "Disabled",
                "failoverGroupId": null,
                "zoneRedundant": false,
                "isUpgradeRequested": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('dbserver_name'))]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Sql/servers/nfldbrs/firewallRules/AllowAllWindowsAzureIps'.",
            "type": "Microsoft.Sql/servers/firewallRules",
            "kind": "v12.0",
            "name": "[concat(parameters('dbserver_name'), '/AllowAllWindowsAzureIps')]",
            "apiVersion": "2014-04-01-preview",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('dbserver_name'))]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Sql/servers/nfldbrs/encryptionProtector/current'.",
            "type": "Microsoft.Sql/servers/encryptionProtector",
            "kind": "servicemanaged",
            "name": "[concat(parameters('dbserver_name'), '/current')]",
            "apiVersion": "2015-05-01-preview",
            "scale": null,
            "properties": {
                "serverKeyName": "ServiceManaged",
                "serverKeyType": "ServiceManaged"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('dbserver_name'))]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Sql/servers/nfldbrs/databases/nfldbrs/transparentDataEncryption/current'.",
            "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
            "name": "[concat(parameters('dbserver_name'), '/nfldb/current')]",
            "apiVersion": "2014-04-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "status": "Enabled"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('dbserver_name'))]",
                "[resourceId('Microsoft.Sql/servers/databases', parameters('dbserver_name'), 'nfldb')]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/sites/NFLGamers/config/web'.",
            "type": "Microsoft.Web/sites/config",
            "name": "[concat(parameters('FunctionApp_name'), '/web')]",
            "apiVersion": "2016-08-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "numberOfWorkers": 1,
                "defaultDocuments": [
                    "Default.htm",
                    "Default.html",
                    "Default.asp",
                    "index.htm",
                    "index.html",
                    "iisstart.htm",
                    "default.aspx",
                    "index.php"
                ],
                "netFrameworkVersion": "v4.0",
                "phpVersion": "5.6",
                "pythonVersion": "",
                "nodeVersion": "",
                "linuxFxVersion": "",
                "requestTracingEnabled": false,
                "remoteDebuggingEnabled": false,
                "remoteDebuggingVersion": null,
                "httpLoggingEnabled": false,
                "logsDirectorySizeLimit": 35,
                "detailedErrorLoggingEnabled": false,
                "publishingUsername": "[concat('$',parameters('FunctionApp_name'))]",
                "publishingPassword": null,
                "appSettings": null,
                "metadata": null,
                "connectionStrings": null,
                "machineKey": null,
                "handlerMappings": null,
                "documentRoot": null,
                "scmType": "None",
                "use32BitWorkerProcess": true,
                "webSocketsEnabled": false,
                "alwaysOn": false,
                "javaVersion": null,
                "javaContainer": null,
                "javaContainerVersion": null,
                "appCommandLine": "",
                "managedPipelineMode": "Integrated",
                "virtualApplications": [
                    {
                        "virtualPath": "/",
                        "physicalPath": "site\\wwwroot",
                        "preloadEnabled": false,
                        "virtualDirectories": null
                    }
                ],
                "winAuthAdminState": 0,
                "winAuthTenantState": 0,
                "customAppPoolIdentityAdminState": false,
                "customAppPoolIdentityTenantState": false,
                "runtimeADUser": null,
                "runtimeADUserPassword": null,
                "loadBalancing": "LeastRequests",
                "routingRules": [],
                "experiments": {
                    "rampUpRules": []
                },
                "limits": null,
                "autoHealEnabled": false,
                "autoHealRules": null,
                "tracingOptions": null,
                "vnetName": "",
                "siteAuthEnabled": false,
                "siteAuthSettings": {
                    "enabled": null,
                    "unauthenticatedClientAction": null,
                    "tokenStoreEnabled": null,
                    "allowedExternalRedirectUrls": null,
                    "defaultProvider": null,
                    "clientId": null,
                    "clientSecret": null,
                    "issuer": null,
                    "allowedAudiences": null,
                    "additionalLoginParams": null,
                    "isAadAutoProvisioned": false,
                    "googleClientId": null,
                    "googleClientSecret": null,
                    "googleOAuthScopes": null,
                    "facebookAppId": null,
                    "facebookAppSecret": null,
                    "facebookOAuthScopes": null,
                    "twitterConsumerKey": null,
                    "twitterConsumerSecret": null,
                    "microsoftAccountClientId": null,
                    "microsoftAccountClientSecret": null,
                    "microsoftAccountOAuthScopes": null
                },
                "cors": {
                    "allowedOrigins": [
                        "https://functions.azure.com",
                        "https://functions-staging.azure.com",
                        "https://functions-next.azure.com"
                    ]
                },
                "push": null,
                "apiDefinition": null,
                "autoSwapSlotName": null,
                "localMySqlEnabled": false,
                "managedServiceIdentityId": null,
                "ipSecurityRestrictions": null
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('FunctionApp_name'))]"
            ]
        },
        {
            "comments": "Generalized from resource: '/subscriptions/b09f6f9b-27bb-4c20-b800-9f0e1e9df5b0/resourceGroups/rs/providers/Microsoft.Web/sites/NFLGamers/hostNameBindings/nflgamers.azurewebsites.net'.",
            "type": "Microsoft.Web/sites/hostNameBindings",
            "name": "[concat(parameters('FunctionApp_name'),'/',parameters('FunctionApp_name'),'.azurewebsites.net')]",
            "apiVersion": "2016-08-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "siteName": "[parameters('FunctionApp_name')]",
                "domainId": null,
                "hostNameType": "Verified"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('FunctionApp_name'))]"
            ]
        }
    ]
}
